# 背包问题总结

## 解题步骤

- 确定dp数组（dp table）以及下标的含义
- 确定递推公式
- dp数组如何初始化
- 确定遍历顺序
- 举例推导dp数组

## 背包递推公式

- 问能否能装满背包（或者最多装多少）：dp[j] = max(dp[j], dp[j - nums[i]] + nums[i])

- 问装满背包有几种方法：dp[j] += dp[j - nums[i]]

- 问背包装满最大价值：dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);

- 问装满背包所有物品的最小个数：dp[j] = min(dp[j - coins[i]] + 1, dp[j]);

## 遍历顺序

- 01背包: 
    - 二维dp数组01背包先遍历物品还是先遍历背包都是可以的，且第二层for循环是从小到大遍历
    - 一维dp数组01背包只能先遍历物品再遍历背包容量，且第二层for循环是从大到小遍历;

- 完全背包: 
    - 如果求组合数就是外层for循环遍历物品，内层for遍历背包
    - 如果求排列数就是外层for遍历背包，内层for循环遍历物品。
    - 如果求最小数，那么两层for循环的先后顺序就无所谓了
